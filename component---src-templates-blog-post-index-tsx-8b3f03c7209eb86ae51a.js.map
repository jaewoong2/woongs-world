{"version":3,"sources":["webpack:///./src/components/utterances/index.tsx","webpack:///./src/components/postnavigator/styles.tsx","webpack:///./src/components/postnavigator/index.tsx","webpack:///./src/templates/blog-post/styles.tsx","webpack:///./src/templates/blog-post/index.tsx","webpack:///./src/components/lists/styles.tsx"],"names":["src","Utterances","React","memo","repo","theme","containerRef","createRef","useLayoutEffect","message","utterancesEl","current","querySelector","type","contentWindow","postMessage","utterances","document","createElement","attributes","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","initialSetting","ref","displayName","LinkLeftWrapper","styled","div","color","linkColor","LinkRightWrapper","PostNavigator","title","slug","left","className","to","length","slice","Section","section","border","dark","isDarkMode","white","purple","primary","yellow","PostNavWrppaer","CommentWrppaer","BlogPost","pageContext","post","data","markdownRemark","next","previous","nextTitle","previousTitle","styledTheme","useTheme","ReactHelmet","favicon","keywords","frontmatter","tags","join","description","map","tag","dangerouslySetInnerHTML","__html","html","right","query","Container","Tag","h1","code","tagColor"],"mappings":"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","file":"component---src-templates-blog-post-index-tsx-8b3f03c7209eb86ae51a.js","sourcesContent":["import React, { createRef, useLayoutEffect } from 'react';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\n\r\nexport interface IUtterancesProps {\r\n    repo: string;\r\n    theme: string;\r\n}\r\n\r\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\r\n    const containerRef = createRef<HTMLDivElement>();\r\n\r\n    useLayoutEffect(() => {\r\n        const initialSetting = () => {\r\n            const utterances = document?.createElement('script');\r\n\r\n            const attributes = {\r\n                src,\r\n                repo,\r\n                theme,\r\n                'issue-term': 'pathname',\r\n                label: 'comments',\r\n                crossOrigin: 'anonymous',\r\n                async: 'true',\r\n            };\r\n\r\n            Object.entries(attributes).forEach(([key, value]) => {\r\n                utterances.setAttribute(key, value);\r\n            });\r\n\r\n            containerRef?.current?.appendChild(utterances);\r\n        };\r\n\r\n        const postThemeMessage = () => {\r\n            const message = {\r\n                type: 'set-theme',\r\n                theme,\r\n            };\r\n            utterancesEl?.contentWindow?.postMessage(message, src);\r\n        };\r\n\r\n        const utterancesEl: HTMLIFrameElement | null | undefined = containerRef?.current?.querySelector(\r\n            'iframe.utterances-frame',\r\n        );\r\n        utterancesEl ? postThemeMessage() : initialSetting();\r\n    }, [repo, theme]);\r\n\r\n    return <div ref={containerRef} />;\r\n});\r\n\r\nUtterances.displayName = 'Utterances';\r\n\r\nexport default React.memo(Utterances);\r\n","import styled from 'styled-components';\r\n\r\nexport const LinkLeftWrapper = styled.div`\r\n    width: 40%;\r\n    height: 3em;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    /* align-items: center; */\r\n    border-radius: 8px;\r\n    background-color: ${({ theme }) => theme.color.linkColor};\r\n    padding: 4px;\r\n\r\n    .placeholder {\r\n        opacity: 78%;\r\n        text-decoration: underline;\r\n        font-size: 0.85em;\r\n        margin-left: 10px;\r\n    }\r\n    .link-title {\r\n        margin-left: 10px;\r\n        font-size: 0.85em;\r\n        padding: 4px;\r\n    }\r\n\r\n    .ban {\r\n        text-decoration: line-through;\r\n        color: rgba(170, 40, 50, 0.96);\r\n    }\r\n    @media screen and (max-width: 450px) {\r\n        width: 60%;\r\n    }\r\n`;\r\n\r\nexport const LinkRightWrapper = styled.div`\r\n    width: 40%;\r\n    height: 3em;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    /* align-items: center; */\r\n    border-radius: 8px;\r\n    background-color: ${({ theme }) => theme.color.linkColor};\r\n    padding: 4px;\r\n    align-items: flex-end;\r\n\r\n    .placeholder {\r\n        opacity: 78%;\r\n        text-decoration: underline;\r\n        font-size: 0.85em;\r\n        margin-right: 10px;\r\n    }\r\n    .link-title {\r\n        margin-right: 10px;\r\n        font-size: 0.85em;\r\n        padding: 4px;\r\n    }\r\n    .ban {\r\n        text-decoration: line-through;\r\n        color: rgba(170, 40, 50, 0.96);\r\n    }\r\n    @media screen and (max-width: 450px) {\r\n        width: 60%;\r\n        margin-top: 20px;\r\n        margin-left: 40%;\r\n    }\r\n`;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { LinkRightWrapper, LinkLeftWrapper } from './styles';\r\n\r\ninterface IpostNavigatorProps {\r\n    slug: string;\r\n    left: boolean;\r\n    right: boolean;\r\n    title: string;\r\n}\r\n\r\nconst PostNavigator: React.VFC<IpostNavigatorProps> = ({ title = '', slug = '', left }) => {\r\n    if (left) {\r\n        return slug ? (\r\n            <LinkLeftWrapper>\r\n                <span className=\"text placeholder\">{'Previous'}</span>\r\n                <Link className=\"link-title\" to={slug}>\r\n                    {title ? (title.length > 20 ? title.slice(0, 20) + '...' : title) : ''}\r\n                </Link>\r\n            </LinkLeftWrapper>\r\n        ) : (\r\n            <LinkLeftWrapper>\r\n                <span className=\"text placeholder\">{'Previous'}</span>\r\n                <a className=\"link-title ban\">NULL</a>\r\n            </LinkLeftWrapper>\r\n        );\r\n    }\r\n\r\n    return slug ? (\r\n        <LinkRightWrapper>\r\n            <span className=\"text placeholder\">{'Next'}</span>\r\n            <Link className=\"link-title\" to={slug}>\r\n                {title ? (title.length > 20 ? title.slice(0, 20) + '...' : title) : ''}\r\n            </Link>\r\n        </LinkRightWrapper>\r\n    ) : (\r\n        <LinkRightWrapper>\r\n            <span className=\"text placeholder\">{'Next'}</span>\r\n            <a className=\"link-title ban\">NULL</a>\r\n        </LinkRightWrapper>\r\n    );\r\n};\r\n\r\nexport default React.memo(PostNavigator);\r\n","import styled from 'styled-components';\r\n\r\nconst Section = styled.section`\r\n    padding: 20px;\r\n    padding-left: 40px;\r\n    padding-right: 40px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    .title {\r\n        padding-bottom: 10px;\r\n        position: relative;\r\n        margin-bottom: 30px;\r\n        h1 {\r\n            margin-bottom: 3px;\r\n        }\r\n        code {\r\n            font-size: 0.75em;\r\n        }\r\n        &::before {\r\n            content: '';\r\n            width: 100%;\r\n            position: absolute;\r\n            left: 0;\r\n            top: 100%;\r\n            margin-bottom: 20px;\r\n            height: 2px;\r\n            border-radius: 8px;\r\n            background-color: ${({ theme }) => theme.color.border};\r\n        }\r\n    }\r\n    .markdown-wrapper {\r\n        font-size: 0.825em;\r\n        color: ${({ theme }) => theme.color.dark};\r\n        padding: 5px;\r\n\r\n        code[class*='language-text'] {\r\n            position: relative;\r\n            font-size: 0.85em;\r\n            z-index: 3;\r\n            font-family: 'Noto Sans KR';\r\n            background: transparent;\r\n            color: ${({ theme }) => (theme.isDarkMode ? theme.color.white : '#657b83')};\r\n            &::before {\r\n                content: '';\r\n                transform: rotate(-2deg);\r\n                position: absolute;\r\n                bottom: 0.3em;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 0.7em;\r\n                border-radius: 5px;\r\n                background-color: ${({ theme }) => (theme.isDarkMode ? theme.color.purple : '#fdf6e3')};\r\n                z-index: -1;\r\n            }\r\n        }\r\n\r\n        hr {\r\n            background: ${({ theme }) => theme.color.dark};\r\n            height: 1px;\r\n            opacity: 0.5;\r\n        }\r\n\r\n        pre {\r\n            margin-top: 30px;\r\n            margin-bottom: 30px;\r\n            background-color: ${({ theme }) => theme.color.primary};\r\n        }\r\n\r\n        blockquote {\r\n            background-color: ${({ theme }) =>\r\n                theme.isDarkMode ? 'rgba(188, 188, 188, 0.125)' : 'rgba(20, 20, 20, 0.125)'};\r\n            border-color: ${({ theme }) => (theme.isDarkMode ? theme.color.yellow : theme.color.purple)};\r\n            p {\r\n                padding: 7px;\r\n                padding-left: 0;\r\n            }\r\n        }\r\n\r\n        p {\r\n            color: ${({ theme }) => theme.color.dark} !important;\r\n            padding-left: 5px;\r\n        }\r\n\r\n        h1,\r\n        h2,\r\n        h3,\r\n        h4 {\r\n            padding: 0;\r\n            padding-top: 3px;\r\n            color: inherit;\r\n        }\r\n\r\n        @media screen and (max-width: 450px) {\r\n            * {\r\n                font-size: 1em;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst PostNavWrppaer = styled.div`\r\n    width: 100%;\r\n    padding: 20px;\r\n    padding-left: 45px;\r\n    padding-right: 45px;\r\n    position: relative;\r\n    justify-content: space-between;\r\n    display: flex;\r\n\r\n    @media screen and (max-width: 450px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst CommentWrppaer = styled.div`\r\n    width: 100%;\r\n    padding: 20px;\r\n    position: relative;\r\n    &::before {\r\n        content: '';\r\n        width: 92%;\r\n        height: 2px;\r\n        background-color: ${({ theme }) => theme.color.border};\r\n        border-radius: 8px;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 4%;\r\n    }\r\n`;\r\n\r\nexport { Section, PostNavWrppaer, CommentWrppaer };\r\n","import React from 'react';\r\nimport { CreatePagesArgs, graphql, Link } from 'gatsby';\r\nimport { useTheme } from 'styled-components';\r\nimport MainComponent from '../Layout';\r\nimport ReactHelmet from '../ReactHelmet';\r\nimport Utterances from '../../components/utterances';\r\nimport PostNavigator from '../../components/postnavigator';\r\nimport { Tag } from '../../components/lists/styles';\r\nimport { CommentWrppaer, PostNavWrppaer, Section } from './styles';\r\n\r\ntype markDownRemarkType = {\r\n    fileds: {\r\n        slug: string;\r\n    };\r\n    html: string;\r\n    frontmatter: { title: string; tags: string[]; description: string };\r\n};\r\n\r\ninterface dataType extends CreatePagesArgs {\r\n    pageContext: {\r\n        next: string;\r\n        previous: string;\r\n        slug: string;\r\n        nextTitle: string;\r\n        previousTitle: string;\r\n    };\r\n    data: {\r\n        markdownRemark: markDownRemarkType;\r\n    };\r\n}\r\n\r\nconst BlogPost: React.FC<dataType> = ({ pageContext, data }) => {\r\n    const post = data.markdownRemark;\r\n    const { next, previous, nextTitle, previousTitle } = pageContext;\r\n    const styledTheme = useTheme();\r\n\r\n    return (\r\n        <MainComponent>\r\n            <ReactHelmet\r\n                favicon={'https://jaewoong2.github.io/woongs-world/favicon.ico'}\r\n                keywords={post?.frontmatter?.tags?.join(',')}\r\n                title={post?.frontmatter?.title}\r\n                description={post?.frontmatter?.description}\r\n            />\r\n            <Section>\r\n                <div className=\"title text\">\r\n                    <h1 className=\"text\">{post?.frontmatter.title}</h1>\r\n                    {post?.frontmatter?.tags?.map(tag => (\r\n                        <Link key={tag} to={`/tags?tag=${tag}`}>\r\n                            <Tag>{tag}</Tag>\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n                <div className=\"markdown-wrapper\" dangerouslySetInnerHTML={{ __html: post?.html ? post?.html : '' }} />\r\n            </Section>\r\n            <PostNavWrppaer>\r\n                <PostNavigator title={previousTitle} slug={previous} right={false} left={true} />\r\n                <PostNavigator title={nextTitle} slug={next} right={true} left={false} />\r\n            </PostNavWrppaer>\r\n            <CommentWrppaer>\r\n                <Utterances\r\n                    repo={'jaewoong2/blog-comment'}\r\n                    theme={styledTheme?.isDarkMode ? 'github-dark' : 'github-light'}\r\n                />\r\n            </CommentWrppaer>\r\n        </MainComponent>\r\n    );\r\n};\r\n\r\nexport default React.memo(BlogPost);\r\n\r\nexport const query = graphql`\r\n    query($slug: String!) {\r\n        markdownRemark(fields: { slug: { eq: $slug } }) {\r\n            fields {\r\n                slug\r\n            }\r\n            html\r\n            frontmatter {\r\n                title\r\n                tags\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    padding: 10px;\r\n    margin-left: 10px;\r\n\r\n    .list-wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .link-posts {\r\n        width: fit-content;\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n\r\n    .post-title {\r\n        display: initial;\r\n        margin-bottom: 11px;\r\n        &:hover {\r\n            opacity: 0.65;\r\n            transition: opacity 0.25s;\r\n        }\r\n        transition: opacity 0.25s;\r\n\r\n        .index {\r\n            font-size: 1.2em;\r\n            margin-right: 3px;\r\n        }\r\n    }\r\n\r\n    .post-date {\r\n        display: initial;\r\n        color: #555;\r\n        font-size: 0.75em;\r\n        margin: 0;\r\n        padding: 0;\r\n        margin-left: 15px;\r\n        margin-bottom: 10px;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    display: inline-block;\r\n    border-bottom: 1px solid;\r\n`;\r\n\r\nexport const Tag = styled.code`\r\n    font-size: 0.85em;\r\n    font-family: 'Roboto';\r\n    border-radius: 4px;\r\n    padding: 4px 6px 4px 6px;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    background-color: ${({ theme }) => theme.color.tagColor};\r\n    margin-right: 2px;\r\n    color: ${({ theme }) => theme.color.primary};\r\n    margin-left: 3px;\r\n`;\r\n"],"sourceRoot":""}