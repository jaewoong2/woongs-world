{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/algorithm/network/","result":{"data":{"markdownRemark":{"fields":{"slug":"/algorithm/network/"},"html":"<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\">### 문제 설명\n> 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어<span class=\"token punctuation\">,</span> 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고<span class=\"token punctuation\">,</span> 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.\n\n- 컴퓨터의 개수 n<span class=\"token punctuation\">,</span> 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때<span class=\"token punctuation\">,</span> 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.\n\n- 제한사항\n    1. 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.\n    2. 각 컴퓨터는 0부터 n-1인 정수로 표현합니다.\n    3. i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.\n    4. computer[i][i]는 항상 1입니다.\n-</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>접근 방법</h3>\n<p> 그래프 알고리즘 문제이다. 주제에 맞게 그래프를 그려서 문제를 풀이<code class=\"language-text\">DFS</code>.</p>\n<ol>\n<li>매개변수로 들어오는 값을 모두 그래프로 만들어주자!</li>\n<li>\n<p>처음 탐색할 원소의 <code class=\"language-text\">index</code> 를 <code class=\"language-text\">stack</code> 에 넣어준다. <code class=\"language-text\">(0 으로 정함)</code></p>\n<ul>\n<li><code class=\"language-text\">stack</code> 에서 <code class=\"language-text\">pop</code> 을 해주고 그 값과 연결 되어 있는 것을 <code class=\"language-text\">stack</code> 에 넣어줌</li>\n<li>만약 <code class=\"language-text\">stack</code> 이 비어있지만, 탐색해야할 <code class=\"language-text\">computers</code> 가 있으면,</li>\n<li>network 를 1 증가시켜주고 탐색해야할 <code class=\"language-text\">computers</code> 중 아무거나 넣어준다.</li>\n</ul>\n</li>\n<li>모든 원소를 다  <code class=\"language-text\">visit</code> 하면 탐색중지.</li>\n</ol>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 자신의 index를 빼고 연결되어 있는 것만 {node: [연결 되어 있는 것들]} 의 형태로 생성.</span>\n    graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>computers<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> node <span class=\"token operator\">!=</span> i <span class=\"token keyword\">and</span> computers<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>computers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> \n    \n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 스택에 0(시작 값) 을 넣어준다.</span>\n    visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>computers<span class=\"token punctuation\">)</span> <span class=\"token comment\"># visit =  ALL False</span>\n    visit<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># visit[start] = True</span>\n    num_of_network <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 네트워크들의 수 현재 시작값이 속해 있는 네트워크가 있으므로 1로 시작한다.</span>\n\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n        v <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># v와 연결된 것들은 같은 네트워크로 묶는다.</span>\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token comment\"># 같은 네트워크로 묶일 것이 없으면, 방문하지 않은 node `한개` 를 찾아서 네트워크로 묶어준다/</span>\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                num_of_network <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">return</span> num_of_network</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[프로그래머스 LV3] 네트워크","tags":["파이썬","알고리즘","algorithm","python","DFS","그래프"]}}},"pageContext":{"slug":"/algorithm/network/","next":"/algorithm/Rank/","nextTitle":"[프로그래머스 LV3] 순위","previous":"/algorithm/the_biggest_box/","previousTitle":"[Programmers] 가장 큰 정사각형"}},"staticQueryHashes":["3501822393"]}