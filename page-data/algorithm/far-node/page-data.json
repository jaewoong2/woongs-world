{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/algorithm/far-node/","result":{"data":{"markdownRemark":{"fields":{"slug":"/algorithm/far-node/"},"html":"<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/49189\"><img src=\"https://images.velog.io/images/jwisgenius/post/89f84e3d-3a8b-4ac5-ae11-a1ad94445b4f/image.png\" alt=\"프로그래머스- 가장 먼 노드\"></a></p>\n<h2>접근방법</h2>\n<ol>\n<li>가장 먼 노드란, 자신밑에 하위노드가 없는 노드가 아니라 <code class=\"language-text\">1 에서 가장 먼 노드</code> 를 의미한다.</li>\n<li>각 노드가 1로부터 얼마나 떨어져 있는지 알면 쉬움.</li>\n<li><code class=\"language-text\">BFS</code> 를 사용해서 각 노드가 얼마나 떨어져 있는지 확인하자. <code class=\"language-text\">(현재 노드까지의 거리 = 이전 노드의 거리 + 1)</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># Graph를 그려줘야한다, 매개변수 vertex는 단뱡향으로 주어졌지만, 사실 양방향으로 확인가능하다.</span>\n\n    <span class=\"token keyword\">for</span> from_<span class=\"token punctuation\">,</span> to_ <span class=\"token keyword\">in</span> vertex<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> from_ <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>from_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>to_<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>from_<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>to_<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> to_ <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>to_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>from_<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>to_<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>from_<span class=\"token punctuation\">]</span>\n\n    start <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">#최상단 노드 = 1</span>\n    distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1~N노드의 (1과 의) 거리를 나타내는 List 각 위치에 있는 값은 1까지와의 거리를 나타낸다</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    visit<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                distances<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\"># `현재 노드까지의 거리 = 이전 노드의 거리 + 1`</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                visit<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> distances <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># `가장 거리가 긴 노드와 같은 노드의 갯수만 확인`</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2>반성</h2>\n<ol>\n<li>\n<p><code class=\"language-text\">distances</code> 변수는 다른 사람의 풀이를 보고 나서 따라한것.</p>\n<ul>\n<li>\n<h3>원래는 어떻게?</h3>\n<ul>\n<li><code class=\"language-text\">queue = [[ Level이 같은 노드들 ]]</code> 이런식으로 같은 거리에 있는 노드를 <code class=\"language-text\">queue</code>에 넣어주었다.</li>\n<li>같은 거리에 있는 각 노드가 갖고 있는 다음 노드들을 <code class=\"language-text\">temp</code> 변수 에 넣어주고 모두 <code class=\"language-text\">temp</code> 변수에 들어오면\n<code class=\"language-text\">queue</code> 에 넣어주었다.</li>\n<li>만약, <code class=\"language-text\">queue</code> 에 있는 모든 노드를 돌았을 때도 어느 노드도 다음 노드를 갖고 있으면, 그 queue에 마지막으로 남은 level의 노드들이 <code class=\"language-text\">가장 먼 노드</code> 로 해서 정답을 제출하였다.</li>\n</ul>\n</li>\n<li>근데, distances를 선언해서 푼 방법(2중 반복문) 보다 반복문을 하나더 추가한(3중 반복문) 반복문이 훨씬 빠르게 풀렸다. </li>\n<li>그래도 <code class=\"language-text\">distances</code> 선언하는 것이 좀 더 직관적이고 코드가 깔끔하므로 이런식의 풀이가 좀더 정석에 가까운듯!</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"[프로그래머스 LV3] 가장 먼 노드","tags":["파이썬","알고리즘","algorithm","python","bfs","그래프","프로그래머스"]}}},"pageContext":{"slug":"/algorithm/far-node/","next":"/algorithm/joystick/","nextTitle":"[프로그래머스 LV2] 조이스틱","previous":"/algorithm/biggest/","previousTitle":"[프로그래머스 LV2] 가장 큰 수 "}},"staticQueryHashes":["3501822393"]}