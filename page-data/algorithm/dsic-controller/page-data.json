{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/algorithm/dsic-controller/","result":{"data":{"markdownRemark":{"fields":{"slug":"/algorithm/dsic-controller/"},"html":"<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42627\">프로그래머스- 디크스컨트롤러</a></p>\n<h2>접근방법</h2>\n<ol>\n<li>가장 빠르게 하기(평균 대기시간이 가장 적게) 위해서는 현재 요청을 할 수 있는 것들 중에서 가장 비용이 작은 것을 실행 시키면 된다.</li>\n<li>\n<p>가장 시간이 작은 것을 사용하기 위해서는 <code class=\"language-text\">우선순위 큐</code> <code class=\"language-text\">heapq</code> 를 사용할 것이다.</p>\n<ul>\n<li><code class=\"language-text\">hepaq.heappop()</code> 은 배열의 가장 첫번째 원소의 가장 작은 것을 반환하기 때문에 <code class=\"language-text\">처리가능한 목록</code> 에 <code class=\"language-text\">[처리 비용, 요청 시간]</code> 의 순으로 넣는다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">처리가능한 목록</code> 에서 가장 비용이 작은 것을 빼주고, <code class=\"language-text\">처리 비용</code> 을 현재 시간에 더해준다.</li>\n<li>\n<p>만약, <code class=\"language-text\">처리 가능한 목록</code>이 비어있으나, 처리해야할 것들 <code class=\"language-text\">jobs</code> 이 있으면 요청시간이 가장 가까운 것을 <code class=\"language-text\">처리 가능한 목록에 넣는다</code></p>\n<ul>\n<li>그리고 현재 시간을 가장 가까운 요청시간으로 바꿔준다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">평균 대기시간(요청되고 처리 될때까지)</code> 을 구하기 위해서 <code class=\"language-text\">result</code> 변수에 <code class=\"language-text\">현재 시간 - 요청시간</code> 을 더해준다.</li>\n<li>return 값으로 <code class=\"language-text\">result // length</code> 을 해준다.</li>\n</ol>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> heapq\n    length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    time <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> jobs <span class=\"token keyword\">or</span> tasks<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            jobs<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            job <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            time <span class=\"token operator\">=</span> job<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>job<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            t<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n            time <span class=\"token operator\">+=</span> t\n\n            temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> temp<span class=\"token punctuation\">:</span>\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>jobs<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> jobs<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            jobs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> jobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> time<span class=\"token punctuation\">]</span>\n\n            result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> n<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">//</span> length</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[프로그래머스 LV3] 디스크 컨트롤러","tags":["파이썬","알고리즘","algorithm","python","힙","heap"]}}},"pageContext":{"slug":"/algorithm/dsic-controller/","next":"/algorithm/boat/","nextTitle":"[프로그래머스 LV2] 구명 보트","previous":"/algorithm/bad-user/","previousTitle":"[프로그래머스 LV3] 불량 사용자"}},"staticQueryHashes":["3501822393"]}