{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/algorithm/djikstra/","result":{"data":{"markdownRemark":{"fields":{"slug":"/algorithm/djikstra/"},"html":"<h2>다익스트라</h2>\n<ul>\n<li>Graph에서 원하는 노드 <code class=\"language-text\">start node</code> 에서, 특정 노드 <code class=\"language-text\">target node</code> 까지 가는 최소비용 찾는 알고리즘</li>\n<li>우선순위 큐\n우선순위 큐를 이용하면 가장 작은 비용의 값만 <code class=\"language-text\">pop()</code> 할 수 있다.\n이를 이용해서 작은 비용의 값만을 비교해서 <code class=\"language-text\">traget node</code> 까지 이을 수 있는 방법을 찾으면 된다.\n(최단 거리만 계속해서 갱신하기)</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">import</span> heapq\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> graph <span class=\"token punctuation\">}</span>\n    distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [비용, 노드]</span>\n    \n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        current_distance<span class=\"token punctuation\">,</span> current_node <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> current_distance <span class=\"token operator\">></span> distances<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n            \n        <span class=\"token keyword\">for</span> new_node<span class=\"token punctuation\">,</span> new_distance <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>itmes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            distance <span class=\"token operator\">=</span> current_distance <span class=\"token operator\">+</span> new_distance\n            <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>new_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                distances<span class=\"token punctuation\">[</span>new_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> new_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                \n                \n    <span class=\"token keyword\">return</span> distances</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"다익스트라 Dijkstra 알고리즘 [Python]","tags":["다익스트라 알고리즘","algorithm","우선순위 큐"]}}},"pageContext":{"slug":"/algorithm/djikstra/","next":"/algorithm/long-palindrome/","nextTitle":"[프로그래머스 LV3] 가장 긴 팰린드롬","previous":"/algorithm/N-Queen/","previousTitle":"N-queens[Python]"}},"staticQueryHashes":["3501822393"]}