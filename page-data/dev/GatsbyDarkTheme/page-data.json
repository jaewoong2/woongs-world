{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/dev/GatsbyDarkTheme/","result":{"data":{"markdownRemark":{"fields":{"slug":"/dev/GatsbyDarkTheme/"},"html":"<p>Gatsby JS를 간단히 말하자면 정적페이지이다.</p>\n<p>그래서 동적으로 Javascript 코드로 CSS를 바꾸는 방법은 정적페이지인 Gatsby JS에는 CRA로 만드는 웹페이지와 다르게 해줘야한다.</p>\n<h3>Styled Theme Provider</h3>\n<p>Styled Component에서 제공하는 Theme(직접 커스텀) 을 Styled를 사용하는 모든 컴포넌트 Element가 쓸 수 있도록 해주는 Provider이다.</p>\n<ul>\n<li>\n<h4>1. styled.d.ts 파일 작성</h4>\n<p>타입스크립트에서 직접 커스텀한 Theme의 Type들을 사용하기 위한 <code class=\"language-text\">.d.ts 파일</code></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> colorTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// colorTypes 는 본인이 커스텀</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'styled-components'</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DefaultTheme</span> <span class=\"token punctuation\">{</span>\n        isDarkMode<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n        color<span class=\"token operator\">:</span> colorTypes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<h4>2. ThemeProvider 생성</h4>\n<p>StyledComponent는 ThemeProvider를 제공해주는데,\n이를 최상위 컴포넌트위에 감싸주면 Styled 를 사용하는 컴포넌트들을 이용할 때, 내가 원하는 {theme} Object 를 사용할 수있다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">Theme Provider</code> 는 작성하는 사람마다 다른 방법이 있는 걸로 아는데 일단.. 나는 ThemeProvider로 {children} 을 감싸는 컴포넌트를 만든다.</p>\n<p>그리고, 거기에서 themeing을 하고 싶은 속성들을 적용 해준다.</p>\n<p>나의경우, dark모드에 따라서 자주 쓸 색상을 정해두고 그 색상으로 나눠준 다음, 작은 단위의 컴포넌트들을 만들어가면서 속성들을 추가하는 식으로 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span> StyledThemeProvider<span class=\"token punctuation\">.</span>tsx\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DefaultTheme<span class=\"token punctuation\">,</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DarkThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'../provider'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> StyledThemeProvider<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isDarkMode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>DarkThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        white<span class=\"token operator\">:</span> <span class=\"token string\">'rgb(250, 250, 250)'</span><span class=\"token punctuation\">,</span>\n        black<span class=\"token operator\">:</span> <span class=\"token string\">'rgb(30, 31, 33, 0.94)'</span><span class=\"token punctuation\">,</span>\n        yellow<span class=\"token operator\">:</span> <span class=\"token string\">'rgb(253, 216, 4)'</span><span class=\"token punctuation\">,</span>\n        purple<span class=\"token operator\">:</span> <span class=\"token string\">'rgba(107, 82, 248, 1)'</span><span class=\"token punctuation\">,</span>\n        whiteDarker<span class=\"token operator\">:</span> <span class=\"token string\">'rgba(233, 233, 233, 0.96)'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> theme<span class=\"token operator\">:</span> DefaultTheme <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isDarkMode<span class=\"token operator\">:</span> isDarkMode<span class=\"token punctuation\">,</span>\n            color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>color<span class=\"token punctuation\">,</span>\n                linkColor<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">'rgba(54, 54, 54, 0.93)'</span> <span class=\"token operator\">:</span> color<span class=\"token punctuation\">.</span>whiteDarker<span class=\"token punctuation\">,</span>\n                tagColor<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">'rgba(202, 214, 240, 0.78)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'rgba(13, 34, 80, 0.52)'</span><span class=\"token punctuation\">,</span>\n                hoverColor<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">'rgba(200, 200, 200, 0.79)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'rgba(40, 40, 40, 0.55)'</span><span class=\"token punctuation\">,</span>\n                primary<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> color<span class=\"token punctuation\">.</span>black <span class=\"token operator\">:</span> color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span>\n                dark<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> color<span class=\"token punctuation\">.</span>white <span class=\"token operator\">:</span> color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">,</span>\n                icon<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> color<span class=\"token punctuation\">.</span>yellow <span class=\"token operator\">:</span> color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">,</span>\n                border<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">'rgb(53, 54, 56)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'rgb(228, 231, 232)'</span><span class=\"token punctuation\">,</span>\n                boxShadow<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">' rgba(0, 1, 3, 0.07)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'rgba(240, 240, 240, 0.04)'</span><span class=\"token punctuation\">,</span>\n                hoverBackground<span class=\"token operator\">:</span> isDarkMode <span class=\"token operator\">?</span> <span class=\"token string\">'rgba(51, 52, 54, 0.918)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'rgba(228, 231, 232, 0.6)'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>isDarkMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeProvider</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> StyledThemeProvider<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Context API</h3>\n<p>내가 만들 Gatsby Blog는, 백엔드 및 데이터 서버와 통신할 일이 없는 정적 페이지이다.</p>\n<p>근데, themeing을 위해서 Redux나 Recoil 같은 전역 상태 관리 라이브러리를 사용하는 것은 사치라고 생각하고,</p>\n<ol>\n<li><code class=\"language-text\">darkmode의 상태</code> 즉, <code class=\"language-text\">boolean 값</code>과</li>\n<li><code class=\"language-text\">darkmode의 상태</code> 를 바꿔주는 <code class=\"language-text\">handler 함수</code></li>\n</ol>\n<p>이 2가지만 을 전역으로 할 것이기 때문에 <code class=\"language-text\">Context API</code>를 사용하였다.</p>\n<p>전역상태 관리를 사용하는 이유는, <code class=\"language-text\">useState()</code> 만을 사용해서 상태관리를 하면, <code class=\"language-text\">Styled Theme Provider</code> 에서 상태를 생성해주고, <code class=\"language-text\">Hanlder 함수</code>는 하위 컴포넌트들에게 props로 넘겨줘야 하는데, 이를 위해서 컴포넌트를 작성하면, <code class=\"language-text\">{children}</code> 및 <code class=\"language-text\">Gatsby-ssr.js 의 {Elemenet}</code> 를 사용하기 불편하다.</p>\n<p>그래서, <code class=\"language-text\">DarkMode의 상태</code> 를 ThemeProvider 보다 먼저 생성하고, Handler는 원하는 곳에서 용이하게 사용하기 위해서 <code class=\"language-text\">Context API</code> 를 사용하였다.</p>\n<ol>\n<li>Context API Context 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ThemeContextTypes</span> <span class=\"token punctuation\">{</span>\n    isDarkMode<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">setIsDarkMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> initialState<span class=\"token operator\">:</span> ThemeContextTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isDarkMode<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">setIsDarkMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> DarkThemeContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ThemeContextTypes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DarkThemeContext<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol start=\"2\">\n<li>ThemeContext를 전달(value값에 원하는 상태와 함수등을)하는 Provider 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useCallback<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getInitialProps<span class=\"token punctuation\">,</span> setThemeProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../repo/app'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DarkThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ContextAPIProvider<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDarkMode<span class=\"token punctuation\">,</span> setIsDarkMode<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> setIsDarkModeHandler <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setIsDarkMode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setThemeProps</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>setThemeProps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DarkThemeContext.Provider</span></span>\n            <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n                isDarkMode<span class=\"token operator\">:</span> isDarkMode<span class=\"token punctuation\">,</span>\n                setIsDarkMode<span class=\"token operator\">:</span> setIsDarkModeHandler<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DarkThemeContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ContextAPIProvider<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Gatsby-ssr.js</h3>\n<p>Gatsby의 Element[src 에 있는 jsx] 들이 Theme를 갖고 <code class=\"language-text\">Dark</code>, <code class=\"language-text\">light</code> 에 따라 css가 바뀌려면, server side rendering 을 해줘야한다.</p>\n<p>즉, 전역상태 Provider, Styled Theme Provider 각각을 element들보다 상위컴포넌트로 싸주고, Server가 실행 되기전에 전역상태가 활성화(?) 되고, 설정한 Styled Theme이 Element에 도달하려면, <code class=\"language-text\">Gatsby-ssr.js</code> 를 작성해줘야한다.</p>\n<p><code class=\"language-text\">Gatsby-ssr.js</code> 는, <code class=\"language-text\">root/gatsby-ssr.js</code> 폴더로 작성 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ContextAPIProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/provider/ContextAPIProvider'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> StyledThemeProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/style/StyledThemeProvider'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./src/style/global-theme'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrapRootElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> element <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContextAPIProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalStyle</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ContextAPIProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[Gatsby JS - Typescript] StyledComponent 로 Dark Theme 구현","tags":["gatsbyjs","styled-componenet","typescript"]}}},"pageContext":{"slug":"/dev/GatsbyDarkTheme/","next":"/dev/VanliaRouter/","nextTitle":"vanilla javascript 로 spa 만들기 (component, props 사용)","previous":"/dev/CustomHooks만들기/","previousTitle":"Custom Hooks 만들기"}},"staticQueryHashes":["3501822393"]}