{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/dev/[프로그래머스]고양이웹어플리케이션/","result":{"data":{"markdownRemark":{"fields":{"slug":"/dev/[프로그래머스]고양이웹어플리케이션/"},"html":"<blockquote>\n<p><em>출처: 프로그래머스 과제란 고양이 사진첩 만들기</em></p>\n<p><em><a href=\"https://programmers.co.kr/skill_check_assignments/100\">https://programmers.co.kr/skill_check_assignments/100</a></em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token operator\">|</span>-- index.html\n<span class=\"token operator\">|</span>-- script.js\n<span class=\"token operator\">|</span>-- assets\n     <span class=\"token operator\">|</span>-- directory.png\n     <span class=\"token operator\">|</span>-- file.png\n     <span class=\"token operator\">|</span>-- nyan-cat.gif\n     <span class=\"token operator\">|</span>-- prev.png\n<span class=\"token operator\">|</span>-- src\n     <span class=\"token operator\">|</span>-- App.js\n     <span class=\"token operator\">|</span>-- utils\n          <span class=\"token operator\">|</span>--index.js\n     <span class=\"token operator\">|</span>-- styles\n          <span class=\"token operator\">|</span>--styles.css\n     <span class=\"token operator\">|</span>components\n          <span class=\"token operator\">|</span>--node\n              <span class=\"token operator\">|</span>--directory.js\n              <span class=\"token operator\">|</span>--prev.js\n              <span class=\"token operator\">|</span>--file.js\n          <span class=\"token operator\">|</span>--Elem.js\n          <span class=\"token operator\">|</span>--Nodes.js\n          <span class=\"token operator\">|</span>--Nav.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>컴포넌트</h1>\n<h2><code class=\"language-text\">Elem</code></h2>\n<ol>\n<li>가장 작은단위의 컴포넌트로 생성자에 들어오는 <code class=\"language-text\">부모 컴포넌트</code>, <code class=\"language-text\">HtmlElementType</code>, <code class=\"language-text\">ClassName</code>이 결정된다.</li>\n<li><code class=\"language-text\">HtmlElement</code> 을 빠르고, 한줄로 만들기 위해서 작성함.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elem</span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> parent<span class=\"token punctuation\">,</span> refName<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>refName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">Directory</code></h2>\n<ol>\n<li>Nodes 의 Node 종류중 하나이며, <code class=\"language-text\">폴더</code> 형식을 의미한다.</li>\n<li>\n<p>Directory를 클릭하면 Data를 불러와서 해당하는 <code class=\"language-text\">Data(Nodes)</code> 들에 대하여 상태를 변화 시켜주고 그에 맞게 Render를한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../App.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../utils/index.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Elem <span class=\"token keyword\">from</span> <span class=\"token string\">\"../Elem.js\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ol>\n<p>export default class Directory {\nref;\nchildImage;\nid;\nchildDiv;\nname;\nconstructor(parent, name, id) {\nconst node = new Elem({ parent, refName: \"div\", className: \"Node\", id });\nconst image = new Elem({\nparent: node.ref,\nrefName: \"img\",\nclassName: \"\",\nid,\n});\nimage.ref.setAttribute(\"src\", \"./assets/directory.png\");\nconst div = new Elem({\nparent: node.ref,\nrefName: \"div\",\nclassName: \"\",\nid,\n});\ndiv.ref.innerHTML = name;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">this.id = id;\nthis.name = name;\nthis.childImage = image.ref;\nthis.childDiv = div.ref;\nthis.childDiv.addEventListener(&quot;click&quot;, this.onClick);\nthis.childImage.addEventListener(&quot;click&quot;, this.onClick);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  }</p>\n<p>  onClick = async () => {\nif (App.state.isLoading) return;\nconst datas = await getData(this.id);\nApp.setState({\nnavStack: [...App.state.navStack, { id: this.id, name: this.name }],\n});\nApp.state.Breadcrumb.setState({ navStack: App.state.navStack });\nApp.state.Nodes.setState({ Node: datas });\n};\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">## `File`\n 1. Nodes 의 Node 종류중 하나이며, `파일(이미지)` 형식을 의미한다.\n 2. File을 클릭하면 Data를 불러와서 해당하는 Data 에 대하여 `Image Modal` 창을 `Toggle`한다\n```js\nimport App from &quot;../../App.js&quot;;\nimport Elem from &quot;../Elem.js&quot;;\n\nconst _URL_ =\n  &quot;https://fe-dev-matching-2021-03-serverlessdeploymentbuck-t3kpj3way537.s3.ap-northeast-2.amazonaws.com/public&quot;;\nexport default class File {\n  ref;\n  childImage;\n  childDiv;\n  filePath;\n  constructor(parent, name, id, filePath) {\n    const node = new Elem({ parent, refName: &quot;div&quot;, className: &quot;Node&quot;, id });\n    const image = new Elem({\n      parent: node.ref,\n      refName: &quot;img&quot;,\n      className: &quot;&quot;,\n      id,\n    });\n    image.ref.setAttribute(&quot;src&quot;, &quot;./assets/file.png&quot;);\n    const div = new Elem({\n      parent: node.ref,\n      refName: &quot;div&quot;,\n      className: &quot;&quot;,\n      id,\n    });\n    div.ref.innerHTML = name;\n\n    this.filePath = filePath;\n    this.childImage = image.ref;\n    this.childDiv = div.ref;\n    this.childDiv.addEventListener(&quot;click&quot;, this.onClick);\n    this.childImage.addEventListener(&quot;click&quot;, this.onClick);\n  }\n\n  onClick = async () =&gt; {\n    if (App.state.isLoading) return;\n    App.toggle(&quot;Image&quot;);\n    App.state.ImageViewrContent.src = _URL_ + this.filePath;\n\n    App.state.ImageViewrContent.onerror = () =&gt; {\n      window.alert(&quot;error!&quot;);\n      App.toggle(&quot;Image&quot;);\n    };\n\n    App.state.ImageViewr.addEventListener(&quot;click&quot;, (e) =&gt; {\n      if (e.currentTarget === e.target) {\n        App.state.isImageFull &amp;&amp; App.toggle(&quot;Image&quot;);\n      }\n    });\n\n    document.body.addEventListener(&quot;keydown&quot;, (e) =&gt; {\n      if (e.code === &quot;Escape&quot;) {\n        App.state.isImageFull &amp;&amp; App.toggle(&quot;Image&quot;);\n      }\n    });\n  };\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">Prev</code></h2>\n<ol>\n<li>Nodes 의 Node 종류중 하나이며, <code class=\"language-text\">Prev(뒤로가기)</code> 형식을 의미한다.</li>\n<li>\n<p>Prev를 클릭하면 NavStack이 하나 빠지고난 뒤 맨 뒤에 있는 위치에 해당하는 Data를 불러와서 Nodes를 render를 해준다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../App.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../utils/index.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Elem <span class=\"token keyword\">from</span> <span class=\"token string\">\"../Elem.js\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ol>\n<p>export default class Prev {\nref;\nchildImage;\nconstructor(parent, id) {\nconst node = new Elem({ parent, refName: \"div\", className: \"Node\", id });\nthis.ref = node.ref;\nconst image = new Elem({\nparent: this.ref,\nrefName: \"img\",\nclassName: \"\",\nid,\n});\nimage.ref.setAttribute(\"src\", \"./assets/prev.png\");\nthis.childImage = image.ref;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">this.id = id;\nthis.childImage = image.ref;\nthis.childImage.addEventListener(&quot;click&quot;, this.onClick);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>  }</p>\n<p>  onClick = async () => {\nif (App.state.isLoading) return;\nconst datas = await getData(this.id);\nApp.setState({\nnavStack: [...App.state.navStack]\n.map((stack, i) =>\ni !== App.state.navStack.length - 1 ? stack : false\n)\n.filter((v) => !!v),\n});\nApp.state.Breadcrumb.setState({ navStack: App.state.navStack });\nApp.state.Nodes.setState({ Node: datas });\n};\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  \n\n## `Nodes: document.querySelector(&quot;.Nodes&quot;)`\n 1. Node들을 관리하는 상위 컴포넌트`(Container 역할을 한다)`\n 2. `render()`가 호출이 되면, `state`에 있는 `Node`에 있는 `Data`에 맞춰서 그에 맞는 `Node 컴포넌트를 생성한다`</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">Nodes</code> 안에 있는 Node State는 {id, name, type, filePath, parent} 등을 갖고 있다.</p>\n<p>filePath가 있으면, <code class=\"language-text\">File</code> 이고, 없으면 <code class=\"language-text\">Directory</code> 이기 때문에, 그에 맞춰 컴포넌트를 생성한다.</p>\n<p>NavStack 에 맞춰서 <code class=\"language-text\">Root Directory</code> 일 때를 제외하고 <code class=\"language-text\">Prev</code> 컴포넌트 를 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">```js\n// Nodes.js\n  render() {\n    // render 될 때마다 this.Nodes = (document.querySelector(&#39;.Nodes&quot;)) 초기화\n    this.Nodes.innerHTML = &quot;&quot;;\n    if (App.state.navStack.length &gt; 1) {\n      new Prev(\n        this.Nodes,\n        App.state.navStack[App.state.navStack.length - 2].id\n      );\n    }\n    this.state.Node?.map((obj) =&gt; {\n      const { name, id, filePath } = obj;\n      if (filePath !== null) {\n        new File(this.Nodes, name, id, filePath);\n      } else {\n        new Directory(this.Nodes, name, id);\n      }\n    });\n  }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"language-text\">Nav: document.querySelector(&quot;.Breadcrumb&quot;)</code></h2>\n<ol>\n<li>Breadcrumb 컴포넌트를 관리하는 파일</li>\n<li>NavStack 이 변화할때마다. (App.setState() 를 통해 변화 할때마다) BreadCrumb를 그려준다.</li>\n</ol>\n<h2><code class=\"language-text\">App: document.querySelector(&quot;.main&quot;)</code></h2>\n<ol>\n<li>Main 컴포넌트를 관리하는 파일</li>\n<li>setState를 하게 되면 하위컴포넌트(<code class=\"language-text\">Nodes</code>, <code class=\"language-text\">Navs</code>)를 <code class=\"language-text\">render()</code> 한다.</li>\n<li>맨 처음 페이지가 로드 되면, <code class=\"language-text\">init()</code>을 실행하는데, data를 받아와서 Nodes에 저장한다.</li>\n<li>다른 곳에서 상태 관리를 하기 위해서 모든 변수및 함수들을 정적으로 정의 하였다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Nav <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Nav.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Nodes <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Nodes.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils/index.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  navStack<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  Breadcrumb<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Nav</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Nodes<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Nodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Loading<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".Loading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ImageViewr<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ImageViewer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ImageViewrContent<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".image-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  isImageFull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> main <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>nextState<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Breadcrumb<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Nodes<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> datas <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Nodes<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Node<span class=\"token operator\">:</span> datas <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Breadcrumb<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> navStack<span class=\"token operator\">:</span> App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>navStack <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"Loading\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Loading<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"hide Modal Loading\"</span><span class=\"token punctuation\">;</span>\n        App<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Loading<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"Modal Loading\"</span><span class=\"token punctuation\">;</span>\n        App<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isImageFull <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ImageViewr<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"hide Modal ImageViewr\"</span><span class=\"token punctuation\">;</span>\n        App<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isImageFull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        App<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>ImageViewr<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"Modal ImageViewr\"</span><span class=\"token punctuation\">;</span>\n        App<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isImageFull<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>아쉬운 점</h1>\n<ol>\n<li>NavStack 과 같은 배열을 사용하지않고 불러온 Data의 Parent Id를 이용하는 것이 좋았을 것 같다.</li>\n<li>App에서만 상태관리를 하였는데, 그와 다르게 React 구조처럼 컴포넌트 각각에서 상태 관리를 하여서 상태가 변환 컴포넌트만 랜더링되게만 하였으면 어떨까 싶다.</li>\n<li>Node의 Div, Img 구조가 반복되는 데 이를 또 따로 컴포넌트로서 구성했어야 했다.</li>\n<li><code class=\"language-text\">Class</code> 형식이 아닌 <code class=\"language-text\">Functional</code> 형식으로 짜는 방법이 조금더 유연했을 것 같다.</li>\n</ol>","frontmatter":{"title":"[프로그래머스 과제] 고양이 사진첩 만들기","tags":["코딩테스트","과제테스트","Vanila JavaScript","자바스크립트","프로그래머스"]}}},"pageContext":{"slug":"/dev/[프로그래머스]고양이웹어플리케이션/","next":"/dev/VanliaRouter2/","nextTitle":"vanilla javascript 로 spa 만들기 (2) (component, props 사용)","previous":"/dev/VanliaRouter/","previousTitle":"vanilla javascript 로 spa 만들기 (component, props 사용)"}},"staticQueryHashes":["3501822393"]}