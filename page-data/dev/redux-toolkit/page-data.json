{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/dev/redux-toolkit/","result":{"data":{"markdownRemark":{"fields":{"slug":"/dev/redux-toolkit/"},"html":"<h2>리덕스 툴킷</h2>\n<p>리덕스를 사용하는데 코드가 많이 길어지는 것이 많이 불편하기 때문에, 이를 좀더 간결하게 사용하기 위한 리덕스 라이브러리 입니다.</p>\n<p>본문에서는 <code class=\"language-text\">createSlice</code> 만 이용하여 Redux에서 사용하는 <code class=\"language-text\">reducer, action, const TYPE</code> 등을 한번에 정의 하는 것을 알아볼 것 입니다.\n여기서 나오는 글은 - <a href=\"https://www.youtube.com/watch?v=9lCmbth63k0\">출처</a> 에서 본 것을 정리 하는 글 입니다.</p>\n<hr>\n<h4>리덕스</h4>\n<ul>\n<li>전역상태를 관리하기 위한 라이브러리</li>\n</ul>\n<p>리덕스는 <code class=\"language-text\">type, state, action, reducer</code> 로 이루어져 있다. </p>\n<ul>\n<li><code class=\"language-text\">type</code> : 그냥 단순한 이름이라고 생각하면 된다.\n보통 <code class=\"language-text\">const TODO_CREATE = &quot;TODOS/CREATE&quot;</code>\n이런식으로 대문자를 사용해서 정의 해준다.\n이렇게 따로 상수로 정의해주는 것은, 에디터의 자동완성을 통한 오류방지이다.</li>\n<li><code class=\"language-text\">state</code> : 전역으로 관리하고 싶은 상태</li>\n<li><code class=\"language-text\">action</code> : <code class=\"language-text\">dispatch</code>를 통해서 보내주는 것.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">type</span> <span class=\"token operator\">:</span> <span class=\"token constant\">TODO_CREATE</span><span class=\"token punctuation\">,</span> data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 이런 식으로 객체 형식으로 생겼다. </span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TodoCreateActionType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">SELECT_TODO</span><span class=\"token punctuation\">;</span>\n    payload <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoCreateAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> TodoCreateActionType <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">type</span> <span class=\"token operator\">:</span> <span class=\"token constant\">SELECT_TODO</span><span class=\"token punctuation\">,</span>\n        payload <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">reducer</code> : <code class=\"language-text\">action</code>이 들어왔을 때 <code class=\"language-text\">state</code> 를 정의하는 곳이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">todoActionTypes</span> <span class=\"token operator\">=</span> CrateTodoActionTypes <span class=\"token operator\">|</span> DeleteActionType <span class=\"token operator\">|</span> EditTodoActionType <span class=\"token operator\">|</span> ToggleActionType<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">todoReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">:</span> Todo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action <span class=\"token operator\">:</span> todoActionTypes<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">CREATE_TODO</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">EDIT_TODO</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> desc <span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>desc <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> todo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">TOGGLE_TODO</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> isComplete <span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>isComplete <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_TODO</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <code class=\"language-text\">state</code>는 초기값 을 <code class=\"language-text\">필수</code>로 정의해주어야 한다.\n또한, return 값은 <code class=\"language-text\">immutable</code> 값을 갖는데,<br>\n<code class=\"language-text\">state = 1</code> 이런식으로 직접 정의 해주면 안된다. <code class=\"language-text\">state</code> 값은  <strong>action이 이루어 지기전 상태값들을 갖고 있는데 그 값을 직접 바꾸지 않고 새로운 값을 보내주어야 한다.</strong> </p>\n<hr>\n<h3>리덕스 툴킷</h3>\n<ul>\n<li><code class=\"language-text\">createSlice</code> </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> exampleSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   name <span class=\"token operator\">:</span> <span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 정의하고 싶은 명칭 </span>\n   initalState <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n   reducers <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// exampleSlice.reducer 로 접근 할 수 있다.</span>\n    <span class=\"token function-variable function\">newId</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action <span class=\"token operator\">:</span>PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// newId => exampleSlice.actions.newId 로 접근 가능</span>\n     <span class=\"token comment\">// newId의 type 은 exampleSlice.actions.newId.type</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>리덕스 툴킷 <code class=\"language-text\">createSlice</code> 의 가장 큰 특징은, reudcer를 사용할 때, <code class=\"language-text\">mutable</code>하다는 것이다. <code class=\"language-text\">immer</code> 가 내부적으로 있어서 <code class=\"language-text\">state = state + 1</code> 이런식으로 상태를 변화 할수 있다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> todosSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span>\n    initialState <span class=\"token operator\">:</span> todosInitialState<span class=\"token punctuation\">,</span>\n    reducers <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        create <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">reducer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> desc<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> isComplete <span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">prepare</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> desc <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> desc <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                payload <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    id <span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    desc<span class=\"token punctuation\">,</span>\n                    isComplete <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">edit</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> desc <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> todoToEdit <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todoToEdit<span class=\"token punctuation\">)</span> todoToEdit<span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span>PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> todoToEdit <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>todoToEdit<span class=\"token punctuation\">)</span> todoToEdit<span class=\"token punctuation\">.</span>isComplete <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>todoToEdit<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span>PayloadAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">action</code> 안에서 <code class=\"language-text\">reducer</code>를 정의 해줄 수 있는데, 앞의 <code class=\"language-text\">create</code>의 예를 보면 <code class=\"language-text\">prepare</code> 로 상태를 변화하기 전에 먼저 <code class=\"language-text\">action</code>으로 부터 받은 값들을 바꿔서 <code class=\"language-text\">action의 reducer</code> 에게 값을 보내줄 수 있다. </p>\n<p>또한 <code class=\"language-text\">createSlice</code> 에는 <code class=\"language-text\">extraReducers</code> 가 있는데, 다른 <code class=\"language-text\">reducer</code> 에 있는 <code class=\"language-text\">type</code>을 함께 <code class=\"language-text\">공유</code>할 수 있다는 개념으로 생각된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> counterSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span>\n    initialState <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    reducers <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    extraReducers <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>todosSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> state <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// reducer의 return 값은 state에 정의 되기 때문에 이렇게 해도 된다</span>\n        <span class=\"token punctuation\">[</span>todosSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span>edit<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> state <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>todosSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> state <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>todosSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> state <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 다른 리듀서의 액션타입과 연동지어서 사용할 때.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다른 리듀서의 액션타입이 들어오면 <code class=\"language-text\">counterSlice</code> 는 그 액션타입을 함께 사용해서 자신의 state들을 정의 해줄 수 있는 것이다.</p>\n<hr>\n<h3>스토어 와 사용</h3>\n<p> 상위 컴포넌트에 뿌려주기 위해서 리덕스 store 를 만들어주려면 <code class=\"language-text\">configureStore</code> 를 사용해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore<span class=\"token punctuation\">,</span> createSlice<span class=\"token punctuation\">,</span> getDefaultMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// const reducers = combineReducers({</span>\n<span class=\"token comment\">//     todos : todosSlice.reducer,</span>\n<span class=\"token comment\">//     selectedTodo : selectedTodoSlice.reducer,</span>\n<span class=\"token comment\">//     counter : counterSlice.reducer,</span>\n<span class=\"token comment\">// })</span>\n<span class=\"token comment\">// redux-toolkit을 사용하면 combine 해주지 않아도</span>\n<span class=\"token comment\">// 객체로 configurestore에 보내주면 알아서 해결해준다.</span>\n\n<span class=\"token keyword\">const</span> reducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    todos <span class=\"token operator\">:</span> todosSlice<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n    selectedTodo <span class=\"token operator\">:</span> selectedTodoSlice<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n    counter <span class=\"token operator\">:</span> counterSlice<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    reducer <span class=\"token operator\">:</span> reducers<span class=\"token punctuation\">,</span>\n    middleware <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">getDefaultMiddleware</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// getDefaultMiddleware -> devTools 같은거</span>\n    devTools <span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>옛날 게시물을 보면 그냥 redux의 store를 사용했는데, redux-toolkit을 사용하면 combineReducer와 devtools를 따로 사용하지 않아도 알아서 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token comment\">// redux-toolkit.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n create <span class=\"token operator\">:</span> createTodoActionCreator<span class=\"token punctuation\">,</span>\n edit <span class=\"token operator\">:</span> editTodoActionCreator<span class=\"token punctuation\">,</span>\n toggle <span class=\"token operator\">:</span> toggleTodoActionCreator<span class=\"token punctuation\">,</span>\n remove <span class=\"token operator\">:</span> deleteTodoActionCreator<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> todosSlice<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// export const createTodoActionCreator = todosSlice.actions.create</span>\n<span class=\"token comment\">// 이런식으로 createSlice로 만든 reducer의 액션들을 </span>\n<span class=\"token comment\">// todosSlice.actions.create로 접근해서 export 해준다. (dispatch 해주기 위해서)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// app.tsx</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">:</span> State</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> editedCount <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">:</span> State</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> selectedTodoId <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">:</span> State</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>selectedTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleDelete <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selectedTodoId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">deleteTodoActionCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id <span class=\"token operator\">:</span> selectedTodoId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>사용법은 리덕스 사용하듯이 하면 된다.</p>","frontmatter":{"title":"Redux-Toolkit (with_React, Typescript)","tags":null}}},"pageContext":{"slug":"/dev/redux-toolkit/","next":"/til/TIL_2021-03-29/","nextTitle":"2021-03-29","previous":"/til/TIL_2021-03-22/","previousTitle":"2021-03-22"}},"staticQueryHashes":["3501822393"]}